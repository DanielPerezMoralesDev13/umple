/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

*/

namespace cruise.umple.compiler;
class PythonGenerator
{
  isA JavaGenerator;
  depend java.io.*;
  depend java.nio.file.*;
  depend cruise.umple.compiler.java.*;
  depend cruise.umple.util.StringFormatter;
  depend cruise.umple.compiler.exceptions.*;

  const int UMPLE_TXL_VERSION = 19;
  const String TXL_VERSION = "TXL v10.8b";
  const String ReadmePath = "txl/README.txt";
  const String ReadmeContent = "These files were automatically generated by Umple for the python code generation. \nThey have not been deleted to improve the speed of subsequent python code generation. The files can be safely deleted after the generation is complete.";
  const String versionPath = "txl/TXL-Version.txt";
  const String versionContent = Integer.toString(UMPLE_TXL_VERSION);
  const String compiledTxlPath = "txl/umpleJavaToPython.ctxl";

  @Override
  public ILang getLanguageFor(UmpleElement aElement)
  {
    if (aElement instanceof UmpleInterface)
    {
      return new JavaInterfaceGenerator();
    }
    else if (aElement instanceof UmpleClass)
    {
      return new PythonClassGenerator();
    }
    else{
        return null;
    }
  }

  @Override
  public void writeFile(UmpleElement aClass) throws IOException
  {
    if (!isTxlInstalled()) {
      System.err.println("Aborting code generation... ");
      return;
    }

    if (!isTXLValid()) {
      generateTxlFiles();
    }

    String className=aClass.getName();
    UmpleClass uClass;
    if (aClass instanceof UmpleClass)
    {
      uClass=(UmpleClass)aClass;
      if(uClass.getHasProxyPattern()||(uClass.getIsDistributed()&&(getModel().getDistributePattern()==1||getModel().getDistributePattern()==2)))
      {
        aClass.setName(className+"Impl");
      }
      if(uClass.hasOuterClass())
      {
        return ; // inner classes should not be writen in single files.
      }
    }

    //Specific case failing for Java code which tries to Generate HTML
    ILang language = null;
    String contents = "";

    try {
      language = getLanguageFor(aClass);
      contents = language.getCode(getModel(), aClass);
    } catch(Exception e) {
      throw new UmpleCompilerException("An error occured during the code generation. You may have been using a feature which is not currently supported for Python code generation", e);
    }


    aClass.setName(className);
    String path = StringFormatter.addPathOrAbsolute(
                  getModel().getUmpleFile().getPath(),
                            getOutput()) +
                            aClass.getPackageName().replace(".", File.separator);
    if (aClass instanceof UmpleClass)
    { uClass=(UmpleClass)aClass;
      if(uClass.getNeedsDefaultInterface()||uClass.getIsDistributed()||uClass.getHasProxyPattern()){
        contents= super.WriteProxyFiles(contents,uClass,path);
      }
      if(uClass.getHasProxyPattern()||(uClass.getIsDistributed()&&(getModel().getDistributePattern()==1||getModel().getDistributePattern()==2))){
        className=className+"Impl";
        //contents=contents.replaceAll("(,|, |\\(|\\( )(this)(,| ,|\\)| \\))","$1self$3");
      }
    }

    File file = new File(path);
    file.mkdirs();
    String filename = path + File.separator + className + ".java";
    BufferedWriter bw = new BufferedWriter(new FileWriter(filename));

    try
    {
      bw.write(contents);
      bw.flush();
    }
    finally
    {
      bw.close();
      contents = "";
    }

    if (aClass instanceof UmpleClass) {
      if(((UmpleClass)aClass).getHasMainMethod())
      {
        writeUncaughtExceptionFile((UmpleClass)aClass);
      }
    }


    String pythonFilename = path + File.separator + className + ".py";
    String CompiledTXLPath = "./txl/umpleJavaToPython.ctxl";
    String[] TXLcommand = {"txl", "-l", CompiledTXLPath, "-s", "2000", filename, "-o", pythonFilename};

    try {

      Process p = Runtime.getRuntime().exec(TXLcommand);
      BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

      String line;
      if(reader.ready()) {
        line = reader.readLine();
      }
      else {
        line = null;
      }

      while (line!=null) {
        if(line.contains("error")) {
           System.err.println("TXL ran into an error while processing one of the files. The file may be missing from the generated code.");
           return;
        }

        if(reader.ready()) {
          line = reader.readLine();
        }
        else {
          line = null;
        }
      }

      p.waitFor();

    } catch (IOException e) {
	    throw new UmpleCompilerException("Unable to read the txl output", e);
    } catch (InterruptedException e) {
      throw new UmpleCompilerException("Unable to open Runtime Process.", e);
    } catch (Exception e) {
      throw new UmpleCompilerException("An error occured during the code generation.", e);
    }

    try {
      File pythonFile = new File(pythonFilename);
      Scanner pyReader = new Scanner(pythonFile);
      while (pyReader.hasNextLine()) {
        String nextLine = pyReader.nextLine();

        //Remove the txl tags from umpleonline output
        if (!nextLine.contains("<TXL UGM>") && !nextLine.contains("</TXL UGM>")) {
          contents += nextLine + "\n";
        }
      }
      pyReader.close();
    } catch (FileNotFoundException e) {
      throw new UmpleCompilerException("Error found with compilation of " + new File(pythonFilename).getName() + " : Output might be missing a file", e);
    }

    getModel().getGeneratedCode().put(aClass.getName(), contents);

    //Remove TXL tags from generated file
    File pyFile = new File(pythonFilename);
    String content = "";
    BufferedReader reader = null;
    FileWriter pyWriter = null;

    try {
      reader = new BufferedReader(new FileReader(pyFile));
      String line = reader.readLine();

      while (line != null) {
        if (!line.contains("<TXL UGM>") && !line.contains("</TXL UGM>")) {
          content += line + "\n";
        }
        line = reader.readLine();
      }

      pyWriter = new FileWriter(pyFile);
      pyWriter.write(content);
    } catch (Exception e) {
      throw new UmpleCompilerException("An error occured while cleaning " + new File(pythonFilename).getName(), e);
    } finally {
      try {
        reader.close();
        pyWriter.close();
      } catch (Exception e) {
        throw new UmpleCompilerException("An error occured while cleaning " + new File(pythonFilename).getName(), e);
      }
    }

    //Removing Java Files
    File javaFile = new File(filename);
    javaFile.delete();

  }

  @Override
  public void writeUncaughtExceptionFile(UmpleClass aClass)
  {
    try {
       // if the name of the class has been changed for proxy pattern, change it for the exceptions too.
    String className=aClass.getName();
    if(aClass.getHasProxyPattern()||(aClass.getIsDistributed()&&(getModel().getDistributePattern()==1||getModel().getDistributePattern()==2)))
      aClass.setName(className+"Impl");

    ILang language = getLanguageFor(aClass);

    aClass.setName(className);
    if(aClass.getHasProxyPattern()||(aClass.getIsDistributed()&&(getModel().getDistributePattern()==1||getModel().getDistributePattern()==2)))
      className=className+"Impl";

    String path = StringFormatter.addPathOrAbsolute(
                  getModel().getUmpleFile().getPath(),
                            getOutput()) +
                            aClass.getPackageName().replace(".", File.separator);

    String filename = path + File.separator + className + ".java";
    File file = new File(path);
    file.mkdirs();

    BufferedWriter bw = new BufferedWriter(new FileWriter(filename,true));
    String contents = new PythonClassGenerator().getExceptionHandler("", aClass, getModel());
    getModel().getGeneratedCode().put(aClass.getName(),getModel().getGeneratedCode().get(aClass.getName())+contents);
    try
    {
      bw.write(contents);
      bw.flush();
    }
    finally
    {
      bw.close();
    }
    } catch(Exception e){ e.printStackTrace(); }
  }

  private boolean isTxlInstalled()
  {
    //Check for TXL installation
	  try {

      Process p = Runtime.getRuntime().exec("txl -V");
      BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

      String line;
      if(reader.ready()) {
        line = reader.readLine();
      } else {
        line = null;
      }

      while (line!=null) {
        if(!line.startsWith("TXL v")) {
          throw new IOException("TXL not found.");
        }

        if (!line.startsWith(TXL_VERSION)) {
          System.out.println("WARNING : Your installed TXL version is different from the one being used by Umple. This may cause some issues with code generation.");
          System.out.println("\tExpected TXL version : " + TXL_VERSION);
        }
      }
    } catch (IOException e) {
      System.err.println("TXL is required for Python code generation. Please go to https://www.txl.ca/txl-download.html to download and install TXL.");
      return false;
	  } catch (Exception e) {
	    throw new UmpleCompilerException("Unable to open Runtime Process.", e);
	  }
	  return true;
  }

  private boolean isTXLValid()
  {
    try {
      //Look for TXL folder
      Path txlDir = Paths.get("txl");
      if (!Files.exists(txlDir)) {
        return false;
      }

      //Check if compiled code is present
      Path compiledTxl = Paths.get(compiledTxlPath);
      if (!Files.exists(compiledTxl)) {
        return false;
      }

      //Check if version file is present
      Path txlVersion = Paths.get(versionPath);
      if (!Files.exists(txlVersion)) {
        return false;
      }

      File versionFile = new File(versionPath);
      Scanner myReader = new Scanner(versionFile);

      //Check if file is empty
      if (!myReader.hasNextLine()) {
        return false;
      }

      //Check Version number
      String version = myReader.nextLine();
      if (!version.equals(Integer.toString(UMPLE_TXL_VERSION))) {
        return false;
      }

      myReader.close();
      return true;
    } catch (Exception e) {
      throw new UmpleCompilerException("An error occured while verifying the integrity of the Txl files.", e);
    }
  }

  private void generateTxlFiles() throws IOException {
    //Create TXL dir
    File txlFolder = new File("txl");
    txlFolder.mkdirs();

    //Write TXL Version File
    BufferedWriter bw = new BufferedWriter(new FileWriter(versionPath));
    try {
      bw.write(versionContent);
      bw.flush();
    }
    catch (Exception e) {
      throw new UmpleCompilerException("An error occured while generating the TXL-Version.txt file.", e);
    }
    finally {
      bw.close();
    }

    //Write TXL README File
    bw = new BufferedWriter(new FileWriter(ReadmePath));
    try {
      bw.write(ReadmeContent);
      bw.flush();
    }
    catch (Exception e) {
      throw new UmpleCompilerException("An error occured while generating the README.txt file.", e);
    }
    finally {
      bw.close();
    }

    //Write the compiled TXL files
    try {
      InputStream jarSource = getClass().getResourceAsStream("/umpleJavaToPython.ctxl");
      Files.copy(jarSource, Paths.get(compiledTxlPath), StandardCopyOption.REPLACE_EXISTING);
    } catch (Exception e) {
      throw new UmpleCompilerException("An error occured while generating the TXL file.", e);
    }
  }
}
