/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

 */

namespace cruise.umple.compiler;

class UmpleAnnotaiveToCompositionGenerator
{
  isA CodeGeneratorWithSubptions;
  depend java.io.*;
  depend java.util.*;
  depend cruise.umple.util.*;
  depend cruise.umple.compiler.exceptions.*;
  depend java.util.stream.Collectors;


  // Contains various aspects from an Umple file (.ump), such as umpleClasses, attributes, associations and methods.  Generated output is based
  // off of what's contained in here.
  UmpleModel model = null;
  String output = "";

  fileExtension= ".ump";
 

  // CENTRAL GENERATE METHOD

 public void generate(){
    StringBuilder code = new StringBuilder();
    List<Mixset> mixsetList = model.getMixsetOrFiles().stream().filter(mixset -> mixset.getIsMixset()).map(obj -> (Mixset)obj).collect(Collectors.toList());
    code.append("/* \n"); 
    code.append("Annotaive fragments are refactored into composition fragments. \n");
    code.append("Total mixsts definitions: "+mixsetList.size());
    code.append("\n*/ \n");
    
    for (Mixset aMixset: mixsetList)
    {
      code.append("\n");
      code.append("mixset "+aMixset.getMixsetName() + " { ") ;
      for (MixsetFragment  mFragment : aMixset.getMixsetFragments())
      {
        code.append("\n// Fragment source file: "+mFragment.getOriginalUmpFile().getFileName());
        code.append("\n// Line : "+mFragment.getOriginalUmpLine());
        code.append("\n"+mFragment.getBody());
        code.append("\n");
      }
      code.append("\n}\n") ;
    }
    
    int labelCount= 1;
    List<UmpleClass> umpleClasses = model.getUmpleClasses().stream().filter(classM -> classM.getMethods().size() > 0).collect(Collectors.toList());
    for (UmpleClass aClass : umpleClasses)
    {
      code.append("\n");
      String className = aClass.getName();
      // start class definition 
      code.append("class " + className + " { \n");
      List<Method> methodsWithInlineMixset = aClass.getMethods().stream().filter(classM -> classM.getMethodBody().getMixsetInMethods().size() > 0).collect(Collectors.toList());
      for (Method method : methodsWithInlineMixset)
      {
        List<MixsetInMethod> mixsetInMethodList = method.getMethodBody().getMixsetInMethods();
        for (MixsetInMethod mixsetInMethod : mixsetInMethodList)
        {
          // prepare parameter types
          String injectionParameters = "";
          List<String> paramList = method.getMethodParameters().stream().map(aParam  -> aParam.getType()).collect(Collectors.toList());
          String paramListCommaSeparated = String.join(",", paramList);
          if(paramList.size() > 0)
          injectionParameters = "("+paramListCommaSeparated+ ")";
          // define a labeled aspect injection.
          String mixsetBody = mixsetInMethod.getMixsetFragment();
          mixsetBody = mixsetBody.substring(mixsetBody.indexOf("{"));
          code.append(" before "+ "Lable_"+mixsetInMethod.getMixsetName()+"_"+labelCount+":"+ method.getName()+ injectionParameters+"\n  "+ mixsetBody);
          labelCount ++;
          // two empty line after each aspect injection.
          code.append("\n\n");
          }
        }
      code.append("} \n"); // end class definition.
    }
    code.append("\n");
    model.setCode(code.toString());
    writeModel();
  }


  private String spacer(int num)
  {
    StringBuilder space = new StringBuilder();
    for (int i = 0; i < num; i++)
    {
      space.append(" ");
    }
    return space.toString();
  }

  private void writeModel()
  {
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName()+"_refactoredToComposition" + this.fileExtension ;
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating UmpleSelf code." + e, e);
    }
  }



}

