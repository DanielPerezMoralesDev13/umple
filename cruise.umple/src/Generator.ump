/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

Definitions of the different code- or model-transformation generators
Note that some generators such as Umlet and Violet are in their own files

 */

namespace cruise.umple.compiler;

//use FeatureDiagramGenerator; // This feature should be moved into config. file in next step.

// Allows independent code generation tools
// Different generators will do different things regarding where the files are put, etc.
interface CodeGenerator
{
  boolean setModel(UmpleModel aUmpleModel);
  boolean setOutput(String aString);
  boolean setSuboption(String subopt);
  boolean hasSuboption(String subopt);
  void generate();
  void prepare();
  void postpare();
}

// Default implementation for generators with suboptions
class CodeGeneratorWithSubptions
{
  isA CodeGenerator;
  lazy String[] suboptions;
  public boolean hasSuboption(String subopt)
  {
    return suboptions.contains(subopt);
  }

  public boolean setSuboption(String subopt)
  {
    return suboptions.add(subopt);
  }
}

interface CodeTranslator
{
  String translate(String id, Attribute attribute);
  String translate(String id, StateMachine stm);
  String translate(String id, State st);
  String translate(String id, Event e);
  String translate(String id, Activity a);
  String translate(String id, AssociationVariable aVar);
  String translate(String id, ConstraintTree constraint);
  String translate(String id, ConstraintVariable cv);
  String translate(String id, TraceItem traceItem);
  // TODO: LH#171
  //String translate(String id, AssociationVariable associationVariable);
}

class SuperCodeGenerator {
  depend java.util.*;
  depend cruise.umple.util.*;
  abstract;
  //The reason for bringing following inheritance here is because of Umple code generation. It generates a false method for iterface coverage.
  isA CodeGeneratorWithSubptions;
  isA CodeTranslator;
  UmpleModel model = null;
  String output = "";

  public void postpare() { GeneratorHelper.postpare(getModel()); }
}
class GeneratorHelper
{
  depend cruise.umple.parser.Position;
}


use Umple.ump;
use StateMachine.ump;
use GeneratorHelper_Code.ump;

use  CodeGenerator ;   
use  UmpleGenerator ;   
use  RubyGenerator ;   
use  JavaGenerator ;   
use  RTCppGenerator ;   
use  PhpGenerator ;  
use  Uigu2Generator ;  
use  SqlGenerator ;   
use  UmpleSelfGenerator ;   
use  USEGenerator ;   
use  EcoreGenerator ;  
use  TestGenerator ;   
use PapyrusGenerator; // This use statement should moved into main conf. file in later stages.
use XmiGenerator;
use TextUmlGenerator;
use ScxmlGenerator;
use CodeGvClassTraitDiagramGenerator;
use EventSequenceGenerator;
use FeatureDiagramCo;
use EntityRelationshipCon;
use SimulateGenerator;
use YumlGenerator;
use XtextGenerator;
use JsonGenerator;
use JsonMixedGenerator;
use StructureDiagramGenerator;
use SuperCodeGeneratorGenerator;
use StateTableGenerator;
use SuperGvGeneratorGenerator;
use HtmlGenerator;
use UmpleModelWalkerGenerator;
use CodeAnalysisGenerator


mixset CodeGenerator { use generators/Generator_Code.ump; }
mixset UmpleGenerator { use generators/Generator_CodeUmple.ump; }
mixset RubyGenerator { use generators/Generator_CodeRuby.ump; }
mixset JavaGenerator { use generators/Generator_CodeJava.ump; }
mixset RTCppGenerator { use generators/Generator_CodeRTCpp.ump; }
mixset PhpGenerator { use generators/Generator_CodePhp.ump; }
mixset Uigu2Generator { use generators/Generator_CodeUigu2.ump; }
mixset SqlGenerator { use generators/Generator_CodeSql.ump; }
mixset UmpleSelfGenerator { use generators/Generator_CodeUmpleSelf.ump; }
mixset USEGenerator { use generators/Generator_CodeUSE.ump; }
mixset EcoreGenerator { use generators/ecoreGenerator/ecoreGeneratorConfig.ump; }
mixset TestGenerator { use generators/Generator_CodeTest.ump; }


mixset PapyrusGenerator{
  use generators/papyrus/Generator_CodePapyrus.ump;
}
mixset XmiGenerator{
  use generators/xmi/Generator_CodeXmi.ump;
}
mixset TextUmlGenerator{ use generators/Generator_CodeTextUml.ump; }
mixset ScxmlGenerator{ use generators/Generator_CodeScxml.ump; }

use generators/statemachineDiagramGenerator/stateMachineDiagramConfig.ump;
mixset StateTableGenerator{ use generators/Generator_CodeStateTables.ump; }
mixset EventSequenceGenerator{ use generators/Generator_CodeEventSequence.ump; }
use SimpleMetricsGenerator;
mixset SimpleMetricsGenerator{ use generators/Generator_CodeSimpleMetrics.ump; }
use CodeGvClassDiagramGenerator;
mixset CodeGvClassDiagramGenerator{
use generators/Generator_CodeGvClassDiagram.ump;
}
mixset CodeGvClassTraitDiagramGenerator{
  use generators/Generator_CodeGvClassTraitDiagram.ump;
}
mixset FeatureDiagramCo{
  use generators/featureDiagramGenerator/FeatureDiagramConfig.ump;
}
mixset EntityRelationshipCon{
  use generators/entityRelationshipDiagramGenerator/entityRelationshipConfig.ump
}
use generators/Generator_CodeAlloy.ump;
use generators/Generator_CodeNuSMV.ump;
use generators/Generator_CodeNuSMVOptimizer.ump;
mixset SimulateGenerator{ use generators/Generator_CodeSimulate.ump; }
mixset YumlGenerator{ use generators/Generator_CodeYuml.ump; }
mixset XtextGenerator{ use generators/Generator_CodeXtext.ump; }
mixset JsonGenerator{ use generators/Generator_CodeJson.ump; }
mixset JsonMixedGenerator{ use generators/Generator_CodeJsonMixed.ump; }
mixset StructureDiagramGenerator{ use generators/Generator_CodeStructureDiagram.ump; }


mixset SuperCodeGeneratorGenerator{
  use Generator_SuperCodeGenerator.ump;}
mixset SuperGvGeneratorGenerator{
  use Generator_SuperGvGenerator.ump; // ABSTRACT CLASS FOR GV!!
}
mixset HtmlGenerator{
  use Generator_Html.ump;}
mixset UmpleModelWalkerGenerator{
  use Generator_UmpleModelWalker.ump;}
mixset CodeAnalysisGenerator{
  use generators/Generator_CodeAnalysis.ump;}

