from Student import Student

class Mentor:
    def __init__(self, aName):
        self._name = aName
        self._students = []

    def setName(self, aName):
        wasSet = False
        self._name = aName
        wasSet = True
        return wasSet

    def getName(self):
        return self._name

    def getStudent(self, index):
        aStudent = self._students[index]
        return aStudent

    def getStudents(self):
        newStudents = tuple(self._students)
        return newStudents

    def numberOfStudents(self):
        number = len(self._students)
        return number

    def hasStudents(self):
        has = len(self._students) > 0
        return has

    def indexOfStudent(self, aStudent):
        index = self._students.index(aStudent)
        return index

    def isNumberOfStudentsValid(self):
        isValid = self.numberOfStudents() > = self.minimumNumberOfStudents() and self.numberOfStudents() < = self.maximumNumberOfStudents()
        return isValid

    @staticmethod
    def requiredNumberOfStudents():
        return 4

    @staticmethod
    def minimumNumberOfStudents():
        return 4

    @staticmethod
    def maximumNumberOfStudents():
        return 4

    def addStudent(self, aNumber):
        if self.numberOfStudents() > = self.maximumNumberOfStudents() :
            return None

        else :
            return Student(aNumber, self)

    def addStudent(self, aStudent):
        wasAdded = False
        if aStudent in self._students :
            return False

        if self.numberOfStudents() > = self.maximumNumberOfStudents() :
            return wasAdded

        existingMentor = aStudent.getMentor()
        isNewMentor = existingMentor != None and not self.equals(existingMentor)
        if isNewMentor and existingMentor.numberOfStudents() < = self.minimumNumberOfStudents() :
            return wasAdded

        if isNewMentor :
            aStudent.setMentor(self)

        else :
            self._students.append(aStudent)

        wasAdded = True
        return wasAdded

    def removeStudent(self, aStudent):
        wasRemoved = False
        if self.equals(aStudent.getMentor()) :
            return wasRemoved

        if self.numberOfStudents() < = self.minimumNumberOfStudents() :
            return wasRemoved

        self._students.remove(aStudent)
        wasRemoved = True
        return wasRemoved

    def delete(self):
        i = len(self._students)
        while i > 0 :
            aStudent = self._students[i - 1]
            aStudent.delete()
            i = i - 1

    def __str__(self):
        return super().__str__() + "[" + "name" + ":" + self.getName() + "]"

