from Mentor import Mentor
import os

class Student():
    def __init__(self, aNumber, aMentor):
        self._number = aNumber
        didAddMentor = self.setMentor(aMentor)
        if not didAddMentor :
            raise RuntimeError ("Unable to create student due to mentor. See http://manual.umple.org?RE002ViolationofAssociationMultiplicity.html")

    def setNumber(self, aNumber):
        wasSet = False
        self._number = aNumber
        wasSet = True
        return wasSet

    def getNumber(self):
        return self._number

    def getMentor(self):
        return self._mentor

    def setMentor(self, aMentor):
        wasSet = False
        if aMentor is None :
            return wasSet

        if self._mentor != None and self._mentor.numberOfStudents() < = Mentor.minimumNumberOfStudents() :
            return wasSet

        existingMentor = self._mentor
        self._mentor = aMentor
        if existingMentor != None and not existingMentor.equals(aMentor) :
            didRemove = existingMentor.removeStudent(self)
            if not didRemove :
                self._mentor = existingMentor
                return wasSet

        self._mentor.addStudent(self)
        wasSet = True
        return wasSet

    def delete(self):
        placeholderMentor = self._mentor
        self._mentor = None
        if not(placeholderMentor is None) :
            placeholderMentor.removeStudent(self)

    def __str__(self):
        return str(super()) + "[" + "number" + ":" + self.getNumber() + "]" + os.linesep + "  " + "mentor = " + (self.getMentor() != (format(id(self.getMentor()), "x")) if None else "null")

