class UmpleToJava {
  toJson_helper <<!<</*toJson_helper*/>>
  /*
  * Helper function to generate Json for this object and connected objects visited objects to enable avoidance of infinite loops
  *
  * @param toJsonOutput  Output is aded to this as the network of objects is traversed
  * @param visitedList  Every concrete object visited is added so we don't re-outpu
  * @param nestLevel    As we output deeper objects, indent them more
  * @param atConcreteClass false when we are recursing to a superclass
  *     so we get the superclass data
  * @return whether or not anything was output (so we can tell whether we need to output a comma)
  */ 
  public boolean toJsonHelper(StringBuilder toJsonOutput, HashSet<Object> visitedList, int nestLevel, boolean atConcreteClass){
      
      String indent = "  ".repeat(nestLevel);
      boolean alreadyVisited = false;
      boolean haveOutputItem = false;
      
      <<#String customToJsonPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before","toJsonHelper"));
	  String customToJsonPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after","toJsonHelper"));
	  if (customToJsonPrefixCode != null) 
	  {
		  append(realSb, "\n{0}",GeneratorHelper.doIndent(customToJsonPrefixCode, "    "));
	  }
	  if (customToJsonPostfixCode != null) 
	  {
		  append(realSb, "\n{0}",GeneratorHelper.doIndent(customToJsonPostfixCode, "    "));
	  }
      String ret = "";
	  LinkedList<String> displayedAttributes = new LinkedList<String>();
	  LinkedList<String> nameOfAttributes = new LinkedList<String>();
	  LinkedList<String> displayedPrimitives = new LinkedList<String>();
	  LinkedList<String> nameOfPrimitives = new LinkedList<String>();
	  List<String> keys = new ArrayList<String>();
	  List<String> associationNames = new ArrayList<String>();
	  List<Object> associations = new ArrayList<Object>();
	  List<Object> associationItems = new ArrayList<Object>();
      List<Boolean> associationIsMany = new ArrayList<Boolean>();

	  for(String k: uClass.getKey().getMembers())
		  keys.add(k);
	  for(Attribute av: uClass.getAttributes())
	  {
	      
		  if(!av.getIsList()&&!"internal".equals(av.getModifier())&&!"const".equals(av.getModifier())&&("String".equals(av.getType())||"int".equals(av.getType())||"Integer".equals(av.getType())||"boolean".equals(av.getType().toLowerCase())||"float".equals(av.getType())||"Float".equals(av.getType())||"double".equals(av.getType())||"Double".equals(av.getType())||"byte".equals(av.getType())||"Byte".equals(av.getType())||"char".equals(av.getType())||"Character".equals(av.getType())||"long".equals(av.getType())||"Long".equals(av.getType())||"short".equals(av.getType())||"Short".equals(av.getType())))
		  {
			  if(av.getIsAutounique() || keys.contains(av.getName())){
				  nameOfPrimitives.addFirst(av.getName());
				  displayedPrimitives.addFirst(gen.translate("getMethod",av)+"()");
			  }
			  else {
				  nameOfPrimitives.addLast(av.getName());
				  displayedPrimitives.addLast(gen.translate("getMethod",av)+"()");
			  }
		  }
		  else if(!av.getIsList()&&!"const".equals(av.getModifier())&&!"internal".equals(av.getModifier()))
		  {
			  if(av.getIsAutounique() || keys.contains(av.getName())){
				  nameOfAttributes.addFirst(av.getName());
				  displayedAttributes.addFirst(gen.translate("getMethod",av)+"()");
			  }
			  else {
				  nameOfAttributes.addLast(av.getName());
				  displayedAttributes.addLast(gen.translate("getMethod",av)+"()");
			  }
		  }
	  }
	  
	  
	  for(AssociationVariable av: uClass.getAssociationVariables())
	  {
		associationNames.add(av.getName());
		//check if the association variable has more than 1 multiplicity or not
		//If the av has more than 1 multiplicity, get plural get()
		if (av.isMany()){
		  associations.add(gen.translate("getManyMethod",av)+"()");
		}
		else{
		  associations.add(gen.translate("getMethod",av)+"()");
		}
		associationItems.add(av.getType());
		associationIsMany.add(av.isMany());
	  }
	  #>>
    if(atConcreteClass) {
      // This will not be true in a super call; output header
      toJsonOutput.append(indent+"\""+this.toString().split("@")[0]+ "\" : {\n"+indent+ "  \"umpleObjectID\" : \""+System.identityHashCode(this)+"\"");

      // Check if we have already visited this object. If so we will not output details
      alreadyVisited = visitedList.contains(this);
      if(!alreadyVisited) {
        visitedList.add(this);
      }
    }
    
    // There is no superclass of this class
    <<#boolean hasSuperClass =uClass.hasExtendsClass();#>>
    if(alreadyVisited) {
      toJsonOutput.append("\n");
    }
    else {
      // Check if this class has a superclass. If it does, we make a call to output superclass content 
      // This will keep calling super so the topmost attributes and associations appear first
      <<#if(hasSuperClass){#>>
        haveOutputItem = super.toJsonHelper(toJsonOutput, visitedList, nestLevel, false);
      <<#}#>>
      // When an object has not already been visited, output its details
      toJsonOutput.append(",\n");
      <<#
        for (int m1=0;m1<displayedPrimitives.size();m1++){#>>
          toJsonOutput.append(indent);
          toJsonOutput.append("  \"");
          toJsonOutput.append("<<#realSb.append(nameOfPrimitives.get(m1));#>>");
          toJsonOutput.append("\" : \"");
          toJsonOutput.append("<<#realSb.append("\"+"+  displayedPrimitives.get(m1)+"+ \"");#>>");
          toJsonOutput.append("\"");
          toJsonOutput.append(",\n");
        <<#}
      #>>
      haveOutputItem = false;
      <<#
        for (int numAttributes=0;numAttributes<displayedAttributes.size();numAttributes++){#>>
          toJsonOutput.append(indent);
          toJsonOutput.append("  \"");
          toJsonOutput.append("<<#realSb.append(nameOfAttributes.get(numAttributes));#>>");
          toJsonOutput.append("\" : \"");
          toJsonOutput.append("<<#realSb.append("\"+"+  displayedAttributes.get(numAttributes)+"+ \"");#>>");
          toJsonOutput.append("\"");
          toJsonOutput.append(",\n");
        <<#}
      #>>
      haveOutputItem = false;
      <<#
        for(int assoIndex=0;assoIndex<associationNames.size();assoIndex++){#>>
         if(haveOutputItem) {
                toJsonOutput.append(",\n");
              }
          toJsonOutput.append(indent);
          <<#if(associationIsMany.get(assoIndex)){#>>
            toJsonOutput.append("  \"");
            toJsonOutput.append("<<#realSb.append(associationNames.get(assoIndex));#>>");
            toJsonOutput.append("\"");
            toJsonOutput.append("<<#realSb.append(" : [");#>>");
            toJsonOutput.append("\n");
            haveOutputItem = false;
            for (<<#append(realSb,""+associationItems.get(assoIndex)+"");#>> anItem :<<#append(realSb,"" + associations.get(assoIndex) + "");#>>){
              if(haveOutputItem) {
                toJsonOutput.append(",\n");
              }
              toJsonOutput.append(indent+"{");
              toJsonOutput.append("\n");
              anItem.toJsonHelper(toJsonOutput, visitedList,nestLevel+2,true);
              toJsonOutput.append("\n");
              toJsonOutput.append(indent+"}");
              haveOutputItem=true;
            }
            toJsonOutput.append("\n");    
            toJsonOutput.append(indent+"]");
            toJsonOutput.append("\n"); 
            haveOutputItem=true;
          <<#}
          else{#>>
            toJsonOutput.append("\n");
            toJsonOutput.append("  \"");
            toJsonOutput.append("<<#realSb.append(associationNames.get(assoIndex));#>>");
            toJsonOutput.append("\"");
            toJsonOutput.append(" : ");
            toJsonOutput.append("\n");
            toJsonOutput.append(indent+"{");
            toJsonOutput.append("\n");
            <<#append(realSb,""+associationItems.get(assoIndex)+"");#>> anotherItem = <<#realSb.append(associations.get(assoIndex));#>>;
            anotherItem.toJsonHelper(toJsonOutput, visitedList, nestLevel+2, true);
            toJsonOutput.append("\n");
            toJsonOutput.append(indent+"}");
            haveOutputItem=true;
          <<#}#>>
      <<#}#>>     
          toJsonOutput.append(indent+"  \n");
    }
    // Finalize the output of the concrete class
    if(atConcreteClass) {
      if(!alreadyVisited) {
        toJsonOutput.append("\n");
      }
      toJsonOutput.append(indent+"}");
    }
    haveOutputItem = true;
    return haveOutputItem;
  }

  !>>  
  
  toJson_declare <<!<</*toJson_declare*/>> 
  /*
  * Generate Json for this object and connected objects visited objects to enable avoidance of infinite loops
  *
  * @return a string in Json  format of this object
  */ 
  public String toJson()
  {
    HashSet<Object> visitedList = new HashSet<Object>();
    StringBuilder toJsonOutput = new StringBuilder();
    toJsonOutput.append("{\n");
    this.toJsonHelper(toJsonOutput, visitedList,1,true);
    toJsonOutput.append("\n}");
    return(toJsonOutput.toString());
  }
  !>>
  
  fromJson_declare <<!<</*fromJson_declare*/>>
  /*
  * Deserialize Json string to instantiate Objects from top-level class
  *
  * @param umpleObjectIDMap<String, Object> mapping parsed objectID (from Json string) with newly instantiated object's objectID
  * 
  * @param String aJsonString is the string in json format that is to be processed and turned into an object
  *
  * @return newly instantiated Object 
  */  

  public static <<#realSb.append(uClass.getName());#>> fromJson(String aJsonString){
    // process the input jsonString so that it can further processed using regex
    aJsonString=aJsonString.replace("\n","").replace(" ","");   
    
    // a map to store the umpleObjectID present in jsonString
    Map<String, Object> umpleObjectIDMap=new HashMap<>();
    
    // instantiate a new object
    <<#appendln(realSb,"");#>>
    <<#realSb.append(uClass.getName());#>> anObject = new <<#realSb.append(uClass.getName());#>>(aJsonString, umpleObjectIDMap);
    return anObject;
  }
  !>>
  
  fromJson_constructor <<!<</*fromJson_constructor*/>>
  /*
  * A new constructor specifically implemented if -s genJson is specified
  * 
  * @param String aJsonString is the string in json format that is to be processed and turned into an object
  *
  * @param umpleObjectIDMap<String, Integer> mapping parsed objectID (from Json string) with newly instantiated object's objectID
  */ 
  public <<#realSb.append(uClass.getName());#>>(String aJsonString, Map<String, Object> umpleObjectIDMap){
    // Initialize a HashMap to store the parsed result
    // key is the attribute name present in the jsonString
    // value is the attribute value present in the jsonString
    HashMap<String,String> parsedResult = new HashMap<String,String>();
    parsedResult = fromJsonParser(aJsonString);

    boolean classExist;
    String parsedClassName=parsedResult.get("className");
    classExist=<<#realSb.append("\""+uClass.getName()+"\"");#>>.equals(parsedClassName);
    // if top-level class does not exist, throw exception
    if(!classExist){
      throw new IllegalArgumentException("Top level class "+parsedClassName+" does not exist, please check the input json string");
    }
    String umpleObjectId=parsedResult.get("umpleObjectID");
    <<#
    // create lists to store the attributes and associations present in the top level class
    LinkedList<String> nameOfAttributesFromJson = new LinkedList<String>();
	LinkedList<String> nameOfPrimitivesFromJson = new LinkedList<String>();
	LinkedList<String> displayedAttributesFromJson = new LinkedList<String>();
	LinkedList<String> displayedPrimitivesFromJson = new LinkedList<String>();
	List<String> keysFromJson = new ArrayList<String>();
	LinkedList<String> attributeTypeFromJson = new LinkedList<String>();
	LinkedList<String> primitiveTypeFromJson = new LinkedList<String>();
	List<String> associationNamesFromJson = new ArrayList<String>();
	List<Object> associationsFromJson = new ArrayList<Object>();
	List<Object> associationItemsFromJson = new ArrayList<Object>();
    List<Boolean> associationIsManyFromJson = new ArrayList<Boolean>();

	for(String k: uClass.getKey().getMembers())
	  keysFromJson.add(k);
	for(Attribute av: uClass.getAttributes())
	{
	  if(!av.getIsList()&&!"internal".equals(av.getModifier())&&!"const".equals(av.getModifier())&&("String".equals(av.getType())||"int".equals(av.getType())||"Integer".equals(av.getType())||"boolean".equals(av.getType().toLowerCase())||"float".equals(av.getType())||"Float".equals(av.getType())||"double".equals(av.getType())||"Double".equals(av.getType())||"byte".equals(av.getType())||"Byte".equals(av.getType())||"char".equals(av.getType())||"Character".equals(av.getType())||"long".equals(av.getType())||"Long".equals(av.getType())||"short".equals(av.getType())||"Short".equals(av.getType())))
	  {
	    if(av.getIsAutounique() || keys.contains(av.getName())){
		  nameOfPrimitivesFromJson.addFirst(av.getName());
		  displayedPrimitivesFromJson.addFirst(gen.translate("getMethod",av)+"()");
		  primitiveTypeFromJson.addFirst(av.getType());
		}
		else {
		  nameOfPrimitivesFromJson.addLast(av.getName());
		  displayedPrimitivesFromJson.addLast(gen.translate("getMethod",av)+"()");
		  primitiveTypeFromJson.addLast(av.getType());
		}
	  }
	  else if(!av.getIsList()&&!"const".equals(av.getModifier())&&!"internal".equals(av.getModifier()))
	  {
	    if(av.getIsAutounique() || keys.contains(av.getName())){
		  nameOfAttributesFromJson.addFirst(av.getName());
		  displayedAttributesFromJson.addFirst(gen.translate("getMethod",av)+"()");
		  attributeTypeFromJson.addFirst(av.getType());
		}
		else {
		  nameOfAttributesFromJson.addLast(av.getName());
		  displayedAttributesFromJson.addLast(gen.translate("getMethod",av)+"()");
		  attributeTypeFromJson.addLast(av.getType());
		}
	  }
	}
	for(AssociationVariable av: uClass.getAssociationVariables())
	  {
		associationNamesFromJson.add(av.getName());
		//check if the association variable has more than 1 multiplicity or not
		//If the av has more than 1 multiplicity, get plural get()
		if (av.isMany()){
		  associationsFromJson.add(gen.translate("getManyMethod",av)+"()");
		}
		else{
		  associationsFromJson.add(gen.translate("getMethod",av)+"()");
		}
		associationItemsFromJson.add(av.getType());
		associationIsManyFromJson.add(av.isMany());
	  }
    #>>
    // Check if the object has already been visited and created
    if((umpleObjectIDMap.get(umpleObjectId)==null)){
    
    // map the old objectID (in jsonString) with the newly created object's hashCode in umpleObjectIDMap 
    umpleObjectIDMap.put(umpleObjectId,this);
    
    String jsonKey="";
    <<#
    String customFromJsonPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before","fromJson"));
	  String customFromJsonPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after","fromJson"));
	  if (customFromJsonPrefixCode != null) 
	  {
		  append(realSb, "\n{0}",GeneratorHelper.doIndent(customFromJsonPrefixCode, "    "));
	  }
	  if (customFromJsonPostfixCode != null) 
	  {
		  append(realSb, "\n{0}",GeneratorHelper.doIndent(customFromJsonPostfixCode, "    "));
	  }

	// below for-loop populate the newly instantiated objects according to parsed value with the value parsed from the json String
	for(int attrJsonCount=0;attrJsonCount< nameOfAttributesFromJson.size();attrJsonCount++){#>>
	  jsonKey=<<#append(realSb,"\""+nameOfAttributesFromJson.get(attrJsonCount)+"\"");#>>;
//more types should be considered here
      <<#if(attributeTypeFromJson.get(attrJsonCount).equals("int")){#>>
        int attrvalueInt = Integer.valueOf(parsedResult.get(jsonKey));
        this.<<#realSb.append(nameOfAttributesFromJson);#>>=attrvalueInt;
      <<#}
      if(attributeTypeFromJson.get(attrJsonCount).equals("double")){#>>
        double attrvalueDouble =Double.valueOf(parsedResult.get(jsonKey));
        this.<<#realSb.append(nameOfAttributesFromJson);#>>=attrvalueDouble;
      <<#}
      if(attributeTypeFromJson.get(attrJsonCount).equals("float")){#>>
        float attrvalueFloat=Float.parseFloat(parsedResult.get(jsonKey));
        this.<<#realSb.append(nameOfAttributesFromJson);#>>=attrvalueFloat;
      <<#}
      if(attributeTypeFromJson.get(attrJsonCount).equals("boolean")){#>>
        boolean attrvalueBool=Boolean.parseBoolean(parsedResult.get(jsonKey));
        this.<<#realSb.append(nameOfAttributesFromJson);#>>=attrvalueBool;
      <<#}
      if(attributeTypeFromJson.get(attrJsonCount).equals("String")){#>>
        this.<<#realSb.append(nameOfAttributesFromJson);#>>=parsedResult.get(jsonKey);
      <<#}#>>
	<<#}#>>
    <<#for (int primJsonCount=0; primJsonCount<nameOfPrimitivesFromJson.size();primJsonCount++){#>>
       jsonKey=<<#append(realSb,"\""+nameOfPrimitivesFromJson.get(primJsonCount)+"\"");#>>;
//more types should be considered here
      <<#if(primitiveTypeFromJson.get(primJsonCount).equals("int")){#>>
        int valueInt = Integer.valueOf(parsedResult.get(jsonKey));
        this.<<#append(realSb,nameOfPrimitivesFromJson.get(primJsonCount));#>>=valueInt;
      <<#}
      if(primitiveTypeFromJson.get(primJsonCount).equals("double")){#>>
        double valueDouble =Double.valueOf(parsedResult.get(jsonKey));
        this.<<#append(realSb,nameOfPrimitivesFromJson.get(primJsonCount));#>>=valueDouble;
      <<#}
      if(primitiveTypeFromJson.get(primJsonCount).equals("float")){#>>
        float valueFloat=Float.parseFloat(parsedResult.get(jsonKey));
        this.<<#append(realSb,nameOfPrimitivesFromJson.get(primJsonCount));#>>=valueFloat;
      <<#}
      if(primitiveTypeFromJson.get(primJsonCount).equals("boolean")){#>>
        boolean valueBool=Boolean.parseBoolean(parsedResult.get(jsonKey));
        this.<<#append(realSb,nameOfPrimitivesFromJson.get(primJsonCount));#>>=valueBool;
      <<#}
      if(primitiveTypeFromJson.get(primJsonCount).equals("String")){#>>
        this.<<#append(realSb,nameOfPrimitivesFromJson.get(primJsonCount));#>>=parsedResult.get(jsonKey);
      <<#}#>>
    <<#}#>>
    // below for-loop check the association class of the top level class
    <<#for (int assoJsonCount=0; assoJsonCount<associationNamesFromJson.size();assoJsonCount++){#>>
       jsonKey=<<#append(realSb,"\""+associationNamesFromJson.get(assoJsonCount)+"\"");#>>;
       String newJsonString=parsedResult.get(jsonKey);
//more types should be considered here
       // if is single association, only create 1 associated object
      <<#if(associationIsManyFromJson.get(assoJsonCount)){#>>
        <<#appendln(realSb,"");#>>
        <<#append(realSb,""+associationItemsFromJson.get(assoJsonCount)+"");#>> manyAssoObj=new <<#append(realSb,""+associationItemsFromJson.get(assoJsonCount)+"");#>>(newJsonString,umpleObjectIDMap);
        List<<<#append(realSb,""+associationItemsFromJson.get(assoJsonCount)+"");#>>> aAssoList=new ArrayList<<<#append(realSb,""+associationItemsFromJson.get(assoJsonCount)+"");#>>>();
        aAssoList.add(manyAssoObj);
        this.<<#append(realSb,associationNamesFromJson.get(assoJsonCount));#>>=aAssoList;
      <<#}
      // if is multiple association, create a new list to store the objects
      else{#>>
        <<#appendln(realSb,"");#>>
        <<#append(realSb,""+associationItemsFromJson.get(assoJsonCount)+"");#>> anAssoObj=new <<#append(realSb,""+associationItemsFromJson.get(assoJsonCount)+"");#>>(newJsonString,umpleObjectIDMap);
        this.<<#append(realSb,associationNamesFromJson.get(assoJsonCount));#>>=anAssoObj;
      <<#}
      }#>>
      }
      else{
      //copy the object retrieved from umpleObjectIDMap
      <<#appendln(realSb,"");#>>
      <<#realSb.append(uClass.getName());#>> createdObj=(<<#realSb.append(uClass.getName());#>>) umpleObjectIDMap.get(umpleObjectId);
      <<#for(int attrJsonCount=0;attrJsonCount< nameOfAttributesFromJson.size();attrJsonCount++){#>>
        this.<<#realSb.append(nameOfAttributesFromJson.get(attrJsonCount));#>>=createdObj.<<#realSb.append(displayedAttributesFromJson.get(attrJsonCount));#>>;
      <<#}#>>
      <<#for (int primJsonCount=0; primJsonCount<nameOfPrimitivesFromJson.size();primJsonCount++){#>>
          this.<<#realSb.append(nameOfPrimitivesFromJson.get(primJsonCount));#>>=createdObj.<<#realSb.append(displayedPrimitivesFromJson.get(primJsonCount));#>>;
      <<#}#>>
      }
  }!>>
 
  fromJson_parser <<!<</*fromJson_parser*/>>
  /*
  * A json parser to parse the input jsonString, if -s genJson is specified
  * 
  * @param String aJsonString is the string in json format that is to be processed and turned into an object
  *
  * @ return HashMap<String,String> that stores paresed result, key is the attribute(or associations) of an object, value is the attribute value or association string
  */ 
  public static HashMap<String,String> fromJsonParser(String jsonString){
  
    HashMap<String,String> parsedResultMap = new HashMap<String,String>();
    //Below (String, Pattern, Matcher) are the regex strings and their patterns and matcher used to process a jsonString
    
        // topLevelString is the regex representing the topLevel class name
        String topLevelString = "\\{\\\"[A-Z]*+[a-z]*\\\":";
        Pattern topLevelPattern = Pattern.compile(topLevelString);
        Matcher topLevelMatcher = topLevelPattern.matcher(jsonString);
        String quotes="\\\"";
        String colon="\\:";
        String colonSquareBracket="\\:\\[";
        //objIDString is the regex representing umpleObjectID that could be found in jsonString
        String objIDString = "\"umpleObjectID\"\\:\"[0-9]*\",";
        Pattern objIDPattern = Pattern.compile(objIDString);
        Matcher objIDMatcher = objIDPattern.matcher(jsonString);
        if(topLevelMatcher.find()){
            //actual string that represent the topLevel className
            String topLevelStringFound=topLevelMatcher.group(0);
            String className=topLevelStringFound.split(quotes)[1];
            parsedResultMap.put("className", className);
            jsonString=jsonString.split(topLevelString,2)[1];
        }
        if(objIDMatcher.find()){
            String objIDFound=objIDMatcher.group(0);
            parsedResultMap.put("umpleObjectID", objIDFound.split(colon)[1].split(quotes)[1]);
            jsonString=jsonString.split(objIDString, 2)[1];
        }
        
        // pairString is the regex for an object's attribute and attribute value, the string parsed will be in key-value formate
        String pairString = "\"\\w*\":\"\\w*\"";
        Pattern pairPattern=Pattern.compile(pairString);
        Matcher pairMatcher=pairPattern.matcher(jsonString);
        // associationString is the regex for an object's multi-association
        String associationString="\\\"\\w*\\\"\\:\\[\\{.*\\]";
        Pattern associationPattern=Pattern.compile(associationString);
        Matcher associationMatcher=associationPattern.matcher(jsonString);
        // newObjJsonString is the regex for an object's single-association
        String newObjJsonString="\\,\\\"\\w*\\\"\\:\\{\\\"\\w*\\\"\\:.*\\}";
        Pattern newObjJsonPattern=Pattern.compile(newObjJsonString);
        Matcher newObjJsonMatcher=newObjJsonPattern.matcher(jsonString);
        //Keep on parsing the attribute's key-value pair, 
        //until a List (multi-associations) pattern or a newObject parttern (single association) is found
        while(pairMatcher.find()){
            String pairStringFound=pairMatcher.group(0);
            parsedResultMap.put(pairStringFound.split(colon)[0].split(quotes)[1], pairStringFound.split(colon)[1].split(quotes)[1]);
            if (associationMatcher.find()){
                String assoStringFound=associationMatcher.group(0);
                jsonString=jsonString.replaceFirst(associationString, "");
                String associationName=assoStringFound.split(colon,2)[0].split(quotes)[1];
                String associationItems=assoStringFound.split(colonSquareBracket,2)[1];
                parsedResultMap.put(associationName, associationItems);
                pairPattern=Pattern.compile(pairString);
                pairMatcher=pairPattern.matcher(jsonString);
            }
        
            if(newObjJsonMatcher.find()){
               String newObjJsonFound=newObjJsonMatcher.group(0);
               jsonString=jsonString.replaceFirst(newObjJsonString, "");
               String newObjName=newObjJsonFound.split(colon,2)[0].split(quotes)[1];
               String newObjItems=newObjJsonFound.split(colon,2)[1];
               parsedResultMap.put(newObjName, newObjItems);
               pairPattern=Pattern.compile(pairString);
               pairMatcher=pairPattern.matcher(jsonString);
            }
        }
        return parsedResultMap;
  }
  !>>
 
}
